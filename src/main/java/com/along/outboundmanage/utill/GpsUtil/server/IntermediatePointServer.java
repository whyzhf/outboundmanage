/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.along.outboundmanage.utill.GpsUtil.server;


import com.along.outboundmanage.utill.GpsUtil.service.CrossGpsService;
import com.along.outboundmanage.utill.GpsUtil.util.ConvertData;
import io.netty.bootstrap.ServerBootstrap;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioServerSocketChannel;

import javax.swing.*;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import java.io.*;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Administrator
 */
public class IntermediatePointServer extends javax.swing.JFrame {

	Vector<Vector<String>> vRow = new Vector<>();
	Vector<String> vName = new Vector<>();

	{
		vName.add("时间");
		vName.add("IP地址");
		vName.add("端口号");
		vName.add("消息");
	}

	/**
	 * Creates new form IntermediatePointServer
	 */
	public IntermediatePointServer() {
		initComponents();
		setJtableColumnWidth();
	}

	private void setJtableColumnWidth() {
		int width = jClientList.getSize().width;
		TableColumnModel cm = jClientList.getColumnModel(); // 表格的列模型
		TableColumn column0 = cm.getColumn(0);// 得到第i个列对象
		column0.setPreferredWidth(width / 4);// 将此列的首选宽度设置为 preferredWidth。
		TableColumn column1 = cm.getColumn(1);// 得到第i个列对象
		column1.setPreferredWidth(width / 6);// 将此列的首选宽度设置为 preferredWidth。
		TableColumn column2 = cm.getColumn(2);// 得到第i个列对象
		column2.setPreferredWidth(width / 8);// 将此列的首选宽度设置为 preferredWidth。

		// jClientList.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jClientList = new javax.swing.JTable();
		jPanel2 = new javax.swing.JPanel();
		startServer = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("gps数据服务");
		setLocationByPlatform(true);

		jClientList.setModel(new javax.swing.table.DefaultTableModel(vRow, vName));
		jScrollPane1.setViewportView(jClientList);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(
						jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
										jPanel1Layout.createSequentialGroup()
												.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
														1035, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addContainerGap()));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel1Layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(112, 112, 112)));

		startServer.setText("启动服务器");
		startServer.setToolTipText("");
		startServer.setActionCommand("startServer");
		startServer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				startServerActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel2Layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(startServer, javax.swing.GroupLayout.PREFERRED_SIZE, 138,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(39, 39, 39)));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout
						.createSequentialGroup().addGap(28, 28, 28).addComponent(startServer,
								javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(63, Short.MAX_VALUE)));

		jLabel1.setText("消息记录");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				layout.createSequentialGroup().addContainerGap().addGroup(layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel1,
								javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(989, 989, 989)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap()
						.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
						.addComponent(jLabel1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jPanel1,
								javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * 启动服务器
	 *
	 * @param evt
	 */
	private void startServerActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_startServerActionPerformed
		// TODO add your handling code here:
		if (evt.getActionCommand().equals("startServer")) {
			new Thread() {
				@Override
				public void run() {
					openNettyServer(8899);
				}

			}.start();
			startServer.setEnabled(false);
		}

	}// GEN-LAST:event_startServerActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			Logger.getLogger(IntermediatePointServer.class.getName())
					.log(Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			Logger.getLogger(IntermediatePointServer.class.getName())
					.log(Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			Logger.getLogger(IntermediatePointServer.class.getName())
					.log(Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			Logger.getLogger(IntermediatePointServer.class.getName())
					.log(Level.SEVERE, null, ex);
		}
		// </editor-fold>
		// </editor-fold>
		//new IntermediatePointServer().openNettyServer(8899);
		//new IntermediatePointServer().openServer(8899);
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new IntermediatePointServer().setVisible(true);
			}
		});
	}

	/**
	 * 服务器相关
	 */
	private ServerSocketChannel ssc;
	private Selector sel;

	private CrossGpsService service = new CrossGpsService();
	Thread t = new Thread(service);
	{
		t.start();
	}

	/**
	 * 启动服务
	 */
	private void openServer(int port) {
		try {
			ssc = ServerSocketChannel.open();
			ssc.bind(new InetSocketAddress(port));
			ssc.configureBlocking(false);
			sel = Selector.open();
			ssc.register(sel, SelectionKey.OP_ACCEPT);
			System.out.println("初始化服务器...");
		} catch (IOException ex) {
			Logger.getLogger(IntermediatePointServer.class.getName()).log(Level.SEVERE, null, ex);
		}

	}

	/**
	 * 监听sel多路复合选择器
	 */
	private void listen() {
		System.out.println("开始监听...");
		while (true) {
			try {
				sel.select();
				Iterator<SelectionKey> keys = sel.selectedKeys().iterator();
				while (keys.hasNext()) {
					SelectionKey key = keys.next();
					// 删除已选key，防止重复处理
					keys.remove();
					// sel.selectNow();
					if (key.isAcceptable()) {
						ServerSocketChannel server = (ServerSocketChannel) key.channel();
						SocketChannel sc = server.accept();
						sc.configureBlocking(false);
						sc.register(sel, SelectionKey.OP_READ);

						System.out.println(sc.socket().getInetAddress().getHostAddress() + ":" + sc.socket().getPort()
								+ "->tcp连接成功");
					}
					if (key.isReadable()) {
						System.out.println("开始读取数据...");
						SocketChannel sc = (SocketChannel) key.channel();
						ByteBuffer bf = ByteBuffer.allocate(1024);
						int len;
						StringBuilder sb = new StringBuilder();
						try {
							while ((len = sc.read(bf)) > 0) {
								bf.flip();// 翻转指针
								byte[] data = bf.array();
								for (int i = 0; i < len; i++) {
									// sb.append(byteToHex(data[i]) + " ");
								}
								bf.clear();
							}

							if (!sb.toString().trim().equals("")) {
								// 去掉前后空格

								// addClient(sc, sb.toString().trim());
								// saveMsgToLog(sc, sb.toString().trim());
								// saveData(sb.toString().trim());
								// System.out.println(sb.toString().trim());
							}

						} catch (Exception ex) {
							ex.printStackTrace();
							key.cancel();
							//sc.close();

							sc.socket().close();
							sc.close();
						}

					}

				}
			} catch (IOException ex) {
				Logger.getLogger(IntermediatePointServer.class.getName()).log(Level.SEVERE, null, ex);
			}

		}
	}

	/**
	 * 将消息写入日志文件
	 * 
	 * @param msg
	 */
	private synchronized void saveMsgToLog(ChannelHandlerContext sc, String msg) {
		String hexStr = msg;
		String txt = ConvertData.getHexMsgToString(msg);
		InetSocketAddress isa = (InetSocketAddress) sc.channel().remoteAddress();
		StringBuilder sb = new StringBuilder();

		String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date());
		String address = isa.getAddress().getHostAddress();
		String port = isa.getPort() + "";
		sb.append(time + ";");
		sb.append(address + ";");
		sb.append(port + ";");
		// sb.append();
		InputStream is = this.getClass().getResourceAsStream("/app.properties");
		Properties p = new Properties();
		try {
			p.load(is);
		} catch (IOException ex) {
		} finally {
			try {
				is.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		Writer w = null;
		BufferedWriter bw = null;
		Writer w1 = null;
		BufferedWriter bw1 = null;
		try {
			String FileName = new SimpleDateFormat("yyyy-MM-dd-HH").format(new Date()) + ".txt";
			String FileName1 = new SimpleDateFormat("yyyy-MM-dd-HH").format(new Date()) + "-hex.txt";
			File dir = new File(p.getProperty("log.location"));

			if (!dir.exists()) {
				dir.mkdirs();
			}
			// 写入文本
			File f = new File(dir + "\\" + FileName);
			File f1 = new File(dir + "\\" + FileName1);
			if (!f.exists()) {
				f.createNewFile();
			}
			w = new FileWriter(f, true);
			bw = new BufferedWriter(w);
			bw.write(sb.toString() + txt + "\r\n");
			// 写入16进制
			if (!f1.exists()) {
				f1.createNewFile();
			}
			w1 = new FileWriter(f1, true);
			bw1 = new BufferedWriter(w1);
			bw1.write(sb.toString() + hexStr + "\r\n");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				bw.close();
				w.close();
				bw1.close();
				w1.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}

	/**
	 * 保存到数据库
	 * 
	 * @param hexData
	 */
	private void saveData(ChannelHandlerContext ctx, String hexData) {
		// gps上传数据
		if (hexData.startsWith("7E 02 00")) {
			// 检查数据有效性
			if (ConvertData.checkData(hexData)) {
				//saveMsgToLog(ctx, hexData);
				String data = ConvertData.getHexMsgToString(hexData);
				String[] strArr = data.split(";");
				System.out.println(data);
				service.updateData(strArr);

			} else {
				System.out.println("数据格式校验未通过...");
			}

		} else if (hexData.startsWith("7E 07 04")) {// 批量上传或是补传

		} else {
			// 不处理
		}

	}

	/**
	 * 基于netty启动服务，并开启监听
	 *
	 */

	private void openNettyServer(int port) {
		EventLoopGroup group = new NioEventLoopGroup();// 连接服务对象
		EventLoopGroup workGroup = new NioEventLoopGroup();// 读写服务对象
		try {
			ServerBootstrap b = new ServerBootstrap();
			b.group(group, workGroup).channel(NioServerSocketChannel.class)
					.childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
					.option(ChannelOption.SO_BACKLOG, 2048)//serverSocketchannel的设置，链接缓冲池的大小
					.childOption(ChannelOption.SO_KEEPALIVE, true)//socketchannel的设置,维持链接的活跃，清除死链接
					.childOption(ChannelOption.TCP_NODELAY, true)//socketchannel的设置,关闭延迟发送
					.childHandler(new ChannelInitializer<io.netty.channel.socket.SocketChannel>() {

						@Override
						public void initChannel(io.netty.channel.socket.SocketChannel ch) throws Exception {
							// ch.pipeline().addLast(new
							// GpsMsgEncoder(1024,3,2,10,0));//处理断包
							ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>() {
								@Override
								protected void channelRead0(ChannelHandlerContext ctx, ByteBuf bf) throws Exception {
									// System.out.println("开始读取数据...");
									StringBuilder sb = new StringBuilder();
									try {
										byte[] data = new byte[bf.readableBytes()];
										bf.readBytes(data);

										for (int i = 0; i < data.length; i++) {
											sb.append(ConvertData.byteToHex(data[i]) + " ");
										}

										// 转义
										String hexStr = ConvertData.replaceData(sb.toString().trim());
										saveMsg(ctx, hexStr);

									} catch (Exception ex) {
										ex.printStackTrace();
									}
								}

								/**
								 * 活动状态
								 */
								@Override
								public void channelActive(ChannelHandlerContext ctx) throws Exception {
									System.out.println(ctx.channel().remoteAddress() + "->tcp连接成功");
								}

								/**
								 * 断开状态
								 */
								@Override
								public void channelInactive(ChannelHandlerContext ctx) throws Exception {
							
								}

								@Override
								public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
								}


								/**
								 * 异常
								 */
								@Override
								public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)
										throws Exception {
									cause.printStackTrace();
									ctx.close();// 关闭客户端
								}

								@Override
								public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
									// TODO Auto-generated method stub
									super.channelRead(ctx, msg);
								}
							});
						}
					});

			// 绑定端口，并开启异步阻塞
			ChannelFuture f = b.bind(port).sync();
			System.out.println(f.toString());
			System.out.println("服务器启动，开始监听：" + f.channel().localAddress());
			// 等待客户端关闭，并阻塞，阻止main运行结束
			f.channel().closeFuture().sync();

		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			group.shutdownGracefully();
			workGroup.shutdownGracefully();
		}
	}

	/**
	 * 保存数据
	 * 
	 * @param ctx
	 * @param hexData
	 */
	private void saveMsg(ChannelHandlerContext ctx, String hexData) {
		if (!hexData.equals("")) {
			// 去掉前后空格
			saveData(ctx, hexData);
			//addClient(ctx,hexData);
			// 应答回复
			/*
			 * byte[] bts = ConvertData.replyMsg(hexData);
			 * ctx.writeAndFlush(Unpooled.copiedBuffer(bts)); String replyTxt =
			 * ""; for (int i = 0; i < bts.length; i++) { replyTxt +=
			 * ConvertData.byteToHex(bts[i]) + " "; }
			 */

		}
	}
	// 检测是否有客户都端连接服务器，有则追加到table
	private void addClient(ChannelHandlerContext sc, String msg) {
		InetSocketAddress isa = (InetSocketAddress) sc.channel().remoteAddress();
		Vector<String> vCell = new Vector<>();
		vCell.add(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date()));
		vCell.add(isa.getAddress().getHostAddress());
		vCell.add(isa.getPort() + "");
		vCell.add(msg);
		vRow.add(vCell);
		if (vRow.size() > 100) {

			vRow.removeElementAt(0);
		}
		/**
		 * 将swing界面操作交给swing线程处理
		 */
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				jClientList.updateUI();
			}
		});

	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTable jClientList;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton startServer;
	// End of variables declaration//GEN-END:variables

}
